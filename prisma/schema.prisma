generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  availability  Availability[]
  schedules     Scheduling[]
  EventType     EventType[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Availability {
  weekDay   Int
  userId    String
  intervals AvailabilityInterval[]
  enabled   Boolean                @default(true)

  user User @relation(fields: [userId], references: [id])

  @@id([userId, weekDay])
}

model AvailabilityInterval {
  id           String       @id @default(uuid())
  userId       String
  weekDay      Int
  availability Availability @relation(fields: [userId, weekDay], references: [userId, weekDay], onDelete: Cascade)

  startTime Int
  endTime   Int
}

model Scheduling {
  id         String           @id @default(uuid())
  name       String
  email      String
  phone      String
  message    String?           @db.Text
  status     SchedulingStatus @default(PENDING)
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  eventId    String
  eventType  EventType        @relation(fields: [eventId], references: [id])
  date       DateTime
  created_at DateTime?        @default(now()) @db.Timestamptz(6)
}

model EventType {
  id           String        @id @default(uuid())
  name         String
  description  String
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id])
  active       Boolean       @default(true)
  duration     Int           @default(60)
  locationType LocationType?

  // Informações adicionais para eventos presenciais
  address     String? // Endereço do evento presencial
  capacity    Int? // Capacidade máxima de participantes
  arrivalInfo String? // Instruções de chegada

  schedules Scheduling[]

  @@index([creatorId])
}

enum LocationType {
  ZOOM
  PHONE_CALL
  PRESENCIAL
}

enum SchedulingStatus {
  PENDING
  ACCEPTED
  REJECTED
  FINISHED
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
